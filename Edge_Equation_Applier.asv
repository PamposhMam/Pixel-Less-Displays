% %Step 1: Read the image
% target=imread("Biccy.bmp");
% target=imresize(target, [1280, 1080]);
% 
% figure;
% imshow(target);
% 
% %Step 2: Enhance the image so its twice as large as it originally was
% target=target.*2;
% 
% %Step 3:Declare Defined Variables
% Search_Kernel=kernel_size(5,5);
% Alpha=1.05;    %if the distance between point A->C is larger than alpha*(|AB|+|BC|), assume that the segment is an arc
% [num_rows, num_cols]= size(target);
% 
% %Step 4: Declare Empty Variables
% Temp_Holder=zeros(num_rows, num_cols, num_rows, num_cols);
% 
% for i=1:num_cols
%     %Descend through each column and then check across the row to see if
%     %there are any white pixels
%     for j=1:num_rows
%         if target(i,j)==1
%             %Use the kernel to check for adjacent pixels, and store them in a matrix
%             %in a 4D array, store the locations of all adjacent pixels. so
%             %in an array, if there are pixels (x2,y2) which are adjacent to
%             %our pixels (x1, y1) then we would store these as
%             %Temp_holder(x1, y1, x2, y2)=1
%         end
%     end
% end
% 
% %% This part NEEDS to be in its own loop because its key that we had the first part so we can accurately apply equations
% 
% for i= 
% %

clear all

% Step 1: Read and Resize the Image
target = imread("Biccy.bmp");
target = imresize(target, [1280, 1080]);  % Resize correctly
target = im2bw(target);  % Convert to binary (Assuming edge image)

figure;
imshow(target);
title('Edge-Defined Image');

% Step 2: Declare Variables
Alpha = 1.05;     
[num_rows, num_cols] = size(target);

% Use a cell array to store equations for each pixel
PixelEquations = cell(num_rows, num_cols);  
curve_or_line = repmat(' ', num_rows, num_cols);  

% Step 3: Detect Connected Components
CC = bwconncomp(target,4);
numObjects = CC.NumObjects;

% Step 4: Process Each Detected Edge Component
for objIdx = 1:numObjects
    pixelIdxList = CC.PixelIdxList{objIdx};  
    [rows, cols] = ind2sub(size(target), pixelIdxList);  

    % Only sort if at least two points exist
    if length(rows) > 1  
        orderedCoords = ordered([rows, cols]);  
    else
        orderedCoords = [rows, cols];  % Keep as is for single-point objects
    end

    % Classify as Line or Curve (Only if 3+ points exist)
    if size(orderedCoords, 1) >= 3  
        A = orderedCoords(1, :);
        B = orderedCoords(round(end/2), :);
        C = orderedCoords(end, :);
        
        dist_AB = norm(A - B);
        dist_BC = norm(B - C);
        dist_AC = norm(A - C);
        
        if (dist_AB + dist_BC) < Alpha * dist_AC
            label = 'l';  % Line
            
            % Compute linear equation: y = mx + b
            m = (B(2) - A(2)) / (B(1) - A(1));  
            b = A(2) - m * A(1);  
            equation = sprintf('y = %.3fx + %.3f', m, b);
        else
            label = 'c';  % Curve
            
            % Compute quadratic equation: y = axÂ² + bx + c
            X = [A(1); B(1); C(1)];
            Y = [A(2); B(2); C(2)];
            coeffs = polyfit(X, Y, 2);  
            equation = sprintf('y = %.3fx^2 + %.3fx + %.3f', coeffs(1), coeffs(2), coeffs(3));
        end
        
        % Store classification and equation for all pixels in this path
        for k = 1:length(orderedCoords)
            x = orderedCoords(k, 1);
            y = orderedCoords(k, 2);
            curve_or_line(x, y) = label;
            PixelEquations{x, y} = equation;
        end
    end
end

% Step 5: Display Results
figure;
imshow(target);
hold on;
for i = 1:num_rows
    for j = 1:num_cols
        if curve_or_line(i,j) == 'l'
            plot(j, i, 'g.', 'MarkerSize', 5);  
        elseif curve_or_line(i,j) == 'c'
            plot(j, i, 'r.', 'MarkerSize', 5);  
        end
    end
end
hold off;
title('Classified Lines (Green) and Curves (Red)');

% Step 6: Access Example Equations (For Debugging)
fprintf('Equation at (100,200): %s\n', PixelEquations{100,200});

%% Hologram-ification

% Initialize hologram plane
Holo = zeros(num_rows, num_cols);

% Define U, V axes
U = linspace(-1, 1, size(Holo, 2));
V = linspace(-1, 1, size(Holo, 1));
[U, V] = meshgrid(U, V);

% Loop over all pixels in `curve_or_line`
for i = 1:num_rows
    for j = 1:num_cols
        % If pixel has an equation stored
        if ~isempty(PixelEquations{i, j})
            equation = PixelEquations{i, j};
            
            % Extract stored coordinate points
            points = sscanf(equation, '%f');  
            
            % Line Processing
            if curve_or_line(i, j) == 'l' && length(points) == 4
                x0 = points(1); y0 = points(2);
                x1 = points(3); y1 = points(4);
                
                Holo_Func = LineHolo(x0, y0, x1, y1, U, V);
                
            % Curve Processing
            elseif curve_or_line(i, j) == 'c' && length(points) == 6
                x0 = points(1); y0 = points(2);
                x1 = points(3); y1 = points(4);
                x2 = points(5); y2 = points(6);
                
                Holo_Func = ArcHolo(x0, y0, x1, y1, x2, y2, U, V, 10); % n=10
                
            else
                continue; % Skip invalid classifications
            end
            
            % Add hologram function contribution
            Holo = Holo + Holo_Func;
        end
    end
end

% Normalize and apply FFT for reconstruction
Replay = fftshift(fft2(Holo));

% Save and display results
imwrite(mat2gray(abs(Holo)), 'Final_Hologram.bmp');
imwrite(mat2gray(abs(Replay)), 'Final_Replay.bmp');

% Display reconstructed hologram
figure; imshow(mat2gray(abs(Holo))); title('Final Hologram');
figure; imshow(mat2gray(abs(Replay))); title('Reconstructed Image (FFT)');
